[{"categories":null,"content":"管用户五 ","date":"2021-12-07","objectID":"/posts/about/:0:0","series":null,"tags":null,"title":"关于我","uri":"/posts/about/#"},{"categories":["CloudNative"],"content":"下载安装 Environment: Ubuntu18.04 Reference: https://docs.docker.com/engine/install/ubuntu/ # 卸载 docker sudo apt-get remove docker docker-engine docker.io containerd runc sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs)stable\" # docker version list apt-cache madison docker-ce apt-cache madison docker-ce-cli # install sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io # 安装指定版本 sudo apt-get install docker-ce=5:18.09.9~3-0~ubuntu-bionic docker-ce-cli=5:18.09.9~3-0~ubuntu-bionic containerd.io # 设置 daemon.json sudo tee /etc/docker/daemon.json \u003c\u003c-'EOF' { \"registry-mirrors\": [\"https://registry.docker-cn.com\"] } EOF # reboot docker sudo systemctl daemon-reload sudo systemctl restart docker # start up automatically on boot up sudo systemctl enable docker \u0026\u0026 sudo systemctl start docker # docker permission deny sudo groupadd docker sudo gpasswd -a [user name] docker sudo service docker restart ","date":"2020-11-28","objectID":"/posts/docker_basics/:1:0","series":null,"tags":["Docker"],"title":"Docker基础","uri":"/posts/docker_basics/#下载安装"},{"categories":["CloudNative"],"content":"修改存储位置 // 修改docker默认镜像/容器存储位置 // Docker默认的镜像和容器存储位置在/var/lib/docke 1)修改docker.service文件　cd /etc/systemd/system/multi-user.target.wants sudo vim docker.service // ExecStart=/usr/bin/dockerd --graph=/data/docker --storage-driver=overlay --graph=/data/docker：docker新的存储位置 --storage-driver=overlay ： 当前docker所使用的存储驱动 2) 重启docker　sudo systemctl daemon-reload sudo systemctl restart docker ","date":"2020-11-28","objectID":"/posts/docker_basics/:2:0","series":null,"tags":["Docker"],"title":"Docker基础","uri":"/posts/docker_basics/#修改存储位置"},{"categories":["CloudNative"],"content":"Docker常用操作 # docker --help build Build an image from a Dockerfile commit Create a new image from a container's changes cp Copy files/folders between a container and the local filesystem create Create a new container diff Inspect changes to files or directories on a container's filesystem events Get real time events from the server exec Run a command in a running container export Export a container's filesystem as a tar archive history Show the history of an image images List images import Import the contents from a tarball to create a filesystem image info Display system-wide information inspect Return low-level information on Docker objects kill Kill one or more running containers load Load an image from a tar archive or STDIN login Log in to a Docker registry logout Log out from a Docker registry logs Fetch the logs of a container pause Pause all processes within one or more containers port List port mappings or a specific mapping for the container ps List containers pull Pull an image or a repository from a registry push Push an image or a repository to a registry rename Rename a container restart Restart one or more containers rm Remove one or more containers rmi Remove one or more images run Run a command in a new container save Save one or more images to a tar archive (streamed to STDOUT by default) search Search the Docker Hub for images start Start one or more stopped containers stats Display a live stream of container(s) resource usage statistics stop Stop one or more running containers tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE top Display the running processes of a container unpause Unpause all processes within one or more containers update Update configuration of one or more containers version Show the Docker version information wait Block until one or more containers stop, then print their exit codes # docker build --help Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...] Run a command in a new container Options: --add-host list Add a custom host-to-IP mapping (host:ip) -d, --detach Run container in background and print container ID -e, --env list Set environment variables --gpus gpu-request GPU devices to add to the container ('all' to pass all GPUs) --help Print usage -h, --hostname string Container host name -i, --interactive Keep STDIN open even if not attached -m, --memory bytes Memory limit --mount mount Attach a filesystem mount to the container --name string Assign a name to the container --network network Connect a container to a network --privileged Give extended privileges to this container -p, --publish list Publish a container's port(s) to the host --rm Automatically remove the container when it exits --shm-size bytes Size of /dev/shm -t, --tty Allocate a pseudo-TTY --ulimit ulimit Ulimit options (default []) -u, --user string Username or UID (format: \u003cname|uid\u003e[:\u003cgroup|gid\u003e]) -v, --volume list Bind mount a volume -w, --workdir string Working directory inside the container Examples # list all containers docker container ls -a / docker ps -a # list all containers id docker container ls -aq / docker contaier ls -a | awk {'print$1'} # remove all containers docker rm $(docker container ls -aq) # list all exited containers docker container ls -f \"status=exited\" # list all exited containers id docker container ls -f \"status=exited\" -q docker ps -a|grep Exited|awk '{print $1}' # remove all exited containers docker rm $(docker container ls -f \"status=exited\" -q) docker rm `docker ps -a|grep Exited|awk '{print $1}'` docker rm $(docker ps -qf status=exited) #删除名称或标签为none的镜像 docker rmi -f `docker images | grep '\u003cnone\u003e' | awk '{print $3}'` #删除所有名字中带 “dee” 关键字的镜像 docker rmi $(docker images | grep \"dee\" | awk '{print $3}') # docker commit [CONTAINER] [REPOSITORY] docker run -d -it --name nginx nginx docker commit nginx hisunyh/my-nginx:1.0 docker run -d -it --name crawler --add-host master.namenode:192.168.1.25 --add-host slave.datanode1:192.168.1.26 --add-host slave.datanode2:192.168.1.29 -e \"queu","date":"2020-11-28","objectID":"/posts/docker_basics/:3:0","series":null,"tags":["Docker"],"title":"Docker基础","uri":"/posts/docker_basics/#docker常用操作"},{"categories":["CloudNative"],"content":"Dockerfile Refenence: https://docs.docker.com/engine/reference/builder/ https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ Samples sudo tee ./Dockerfile.dev \u003c\u003c-'EOF' FROM golang:1.14-alpine AS prod-build ENV GOPROXY https://goproxy.cn,direct # ENV GO111MODULE on WORKDIR /workspace COPY . /workspace RUN CGO_ENABLED=0 GOOS=linux go build -o deep_arena . # FROM scratch AS prod-final FROM debian:9.12 AS prod-final RUN rm -f /etc/localtime \\ \u0026\u0026 ln -sv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ \u0026\u0026 echo \"Asia/Shanghai\" \u003e /etc/timezone COPY --from=prod-build /workspace/deep_arena . COPY --from=prod-build /workspace/conf.toml . COPY --from=prod-build /workspace/config . EXPOSE 8082 CMD [\"/deep_arena\"] EOF docker login my-horbor.com docker build -f ./Dockerfile.dev -t my-horbor.com/deep_arena:dev_v1.0 . docker push my-horbor.com/deep_arena:dev_v1.0 docker pull my-horbor.com/deep_arena:dev_v1.0 docker run -d -it -p 9082:8082 --name da -v ~/pod_logs:/pod_logs my-horbor.com/deep_arena:dev_v1.0 ","date":"2020-11-28","objectID":"/posts/docker_basics/:4:0","series":null,"tags":["Docker"],"title":"Docker基础","uri":"/posts/docker_basics/#dockerfile"},{"categories":[],"content":"github action + hugo / vuepress + github pages / gitee pages 自动构建发布 ","date":"2020-11-28","objectID":"/posts/github-action/:0:0","series":null,"tags":[],"title":"Github Action","uri":"/posts/github-action/#"},{"categories":[],"content":"GitHub pages + hugo 新建两个仓库分别用于开发和部署(可用同一仓库) # example # dev repo -\u003e sunnyh1220/docsgo # deploy repo -\u003e sunnyh1220/posts (可选sunnyh1220.github.io 或 sunnyh1220/xxx的gh-pages分支 ) Deploy keys \u0026\u0026 Secrets ssh-keygen -t rsa -b 4096 -C \"$(git config user.email)\" -f gh-pages -N \"\" # You will get 2 files: # gh-pages.pub (public key) # gh-pages (private key) 部署仓库设置Deploy keys: Settings -\u003e Deploy keys, 添加公钥, Allow write access勾上; 开发仓库设置Secrets: Setting -\u003e Secrets, 添加私钥, name为 ACTIONS_DEPLOY_KEY; 在开发仓库以下路径新建GitHub Actions部署脚本文件: `.github/workflow/hugo-ci.yml name:GitHub Pageson:push:branches:- main # Set a branch to deploypull_request:jobs:deploy:runs-on:ubuntu-20.04concurrency:group:${{ github.workflow }}-${{ github.ref }}steps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'0.89.4'extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3if:${{ github.ref == 'refs/heads/main' }}with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}external_repository:sunnyh1220/posts # github usernamepublish_branch:gh-pagespublish_dir:./public hugo配置 # config.toml # 站点配置 baseURL = \"https://sunnyh1220.github.io/posts\" # 或 https://sunnyh1220.github.io 开发仓库提交后就会自动构建部署. ","date":"2020-11-28","objectID":"/posts/github-action/:0:1","series":null,"tags":[],"title":"Github Action","uri":"/posts/github-action/#github-pages--hugo"},{"categories":[],"content":"GitHub pages + vuepress 仓库配置同上 VuePress配置 // .vuepress/config.js module.exports = { base: '/posts/' // repository name } GitHub Actions脚本文件 `.github/workflow/vuepress-ci.yml # This is a basic workflow to help you get started with Actionsname:Blog CI# Controls when the action will run. on:# Triggers the workflow on push or pull request events but only for the master branchpush:branches:[master ]# Allows you to run this workflow manually from the Actions tabworkflow_dispatch:# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:# This workflow contains a single job called \"build\"build:# The type of runner that the job will run onruns-on:ubuntu-latest# Steps represent a sequence of tasks that will be executed as part of the jobsteps:# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it- uses:actions/checkout@v2# Runs a set of commands using the runners shell- name:Blog buildingrun:|yarn install yarn docs:build - name:Blog Deployuses:peaceiris/actions-gh-pages@v2.5.1env:ACTIONS_DEPLOY_KEY:${{ secrets.ACTIONS_DEPLOY_KEY }}EXTERNAL_REPOSITORY:sunnyh1220/posts# github deploy repository, PUBLISH_BRANCH:gh-pages# deploy branchPUBLISH_DIR:docs/.vuepress/dist ","date":"2020-11-28","objectID":"/posts/github-action/:0:2","series":null,"tags":[],"title":"Github Action","uri":"/posts/github-action/#github-pages--vuepress"},{"categories":[],"content":"gitee pages 参考: https://github.com/yanglbme/gitee-pages-action ","date":"2020-11-28","objectID":"/posts/github-action/:0:3","series":null,"tags":[],"title":"Github Action","uri":"/posts/github-action/#gitee-pages"}]